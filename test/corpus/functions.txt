==================
Top-level functions
==================

fun main() {}

---

(source_file
  (function_declaration
    (identifier) (parameters)
    (function_body)))

==================
Generic functions
==================

fun <T> test() {}

---

(source_file
  (function_declaration
    (type_parameters (type_parameter (type_identifier)))
    (identifier) (parameters)
    (function_body)))

==================
Generic functions with parameters
=================

fun <T: Int> bar(foo: Int): T {}

---
(source_file
  (function_declaration
    (type_parameters
      (type_parameter
        (type_identifier)
        (user_type
          (type_identifier))))
    (identifier)
    (parameters
      (parameter
        (identifier)
        (user_type
          (type_identifier))))
    (user_type
      (type_identifier))
    (function_body)))

==================
Functions with parameters
==================

fun main(args: Array<String>) {}

fun sum(a: Int, b: Int) = a + b

---

(source_file
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (user_type
          (type_identifier)
          (type_arguments (type_projection (user_type (type_identifier)))))))
    (function_body))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (user_type (type_identifier)))
      (parameter
        (identifier)
        (user_type (type_identifier))))
    (function_body
      (additive_expression
        (identifier)
        (identifier)))))

==================
Functions with return types
==================

fun answerToTheUltimateQuestionOfLifeTheUniverseAndEverything(): Int = 42

---

(source_file
  (function_declaration
    (identifier)
    (parameters)
    (user_type (type_identifier))
    (function_body (decimal_integer_literal))))

==================
Functions with return calls
==================

fun foo(p0: Int): Long {
  return p0.toLong()
}

---

(source_file
  (function_declaration
    (identifier)
    (parameters
    (parameter
      (identifier)
      (user_type
        (type_identifier))))
    (user_type
      (type_identifier))
    (function_body
      (statements
        (jump_expression
          (call_expression
            (navigation_expression
              (identifier)
              (navigation_suffix
                (identifier)))
            (call_suffix
              (value_arguments))))))))

=====================
Override functions
======================

override fun boo() = foo()

---

(source_file
  (function_declaration
    (modifiers
      (member_modifier))
    (identifier)
    (parameters)
    (function_body
      (call_expression
        (identifier)
        (call_suffix
          (value_arguments))))))

=====================
Set function call
======================

fun test() {
    isAccessible = true
    set(it, COROUTINE_SUSPENDED)
}

---

(source_file
  (function_declaration
    (identifier)
    (parameters)
    (function_body
      (statements
        (assignment
          (directly_assignable_expression
            (identifier))
          (boolean_literal))
        (call_expression
          (identifier)
          (call_suffix
            (value_arguments
              (value_argument
                (identifier))
              (value_argument
                (identifier)))))))))

==================
Anonymous function
==================

fun()
val anon = fun()

---

(source_file
  (anonymous_function
  (parameters))
  (property_declaration
    (binding_pattern_kind)
    (variable_declaration
      (identifier))
    (anonymous_function (parameters))))

==================
Anonymous function with parameters
==================

fun(x: Int)
val anon = fun(x: Int)

---

(source_file
  (anonymous_function
  (parameters
    (parameter
      (identifier)
      (user_type
        (type_identifier)))))
  (property_declaration
    (binding_pattern_kind)
    (variable_declaration
      (identifier))
    (anonymous_function
    (parameters
      (parameter
        (identifier)
        (user_type
          (type_identifier)))))))

==================
Anonymous function with return type
==================

fun(): Int
val anon = fun(): Int

---

(source_file
  (anonymous_function
    (parameters)
    (user_type
      (type_identifier)))
  (property_declaration
    (binding_pattern_kind)
    (variable_declaration
      (identifier))
    (anonymous_function
      (parameters)
      (user_type
        (type_identifier)))))

==================
Anonymous function with body
==================

fun() = true
fun() { assert(true) }
val anon = fun() = true
val anon = fun() { assert(true) }

---

(source_file
  (anonymous_function
    (parameters)
    (function_body
      (boolean_literal)))
  (anonymous_function
    (parameters)
    (function_body
      (statements
        (call_expression
          (identifier)
          (call_suffix
            (value_arguments
              (value_argument
                (boolean_literal))))))))
  (property_declaration
    (binding_pattern_kind)
    (variable_declaration
      (identifier))
    (anonymous_function
      (parameters)
      (function_body
        (boolean_literal))))
  (property_declaration
    (binding_pattern_kind)
    (variable_declaration
      (identifier))
    (anonymous_function
      (parameters)
      (function_body
        (statements
          (call_expression
            (identifier)
            (call_suffix
              (value_arguments
                (value_argument
                  (boolean_literal))))))))))

==================
Function with backticked name
==================

fun `this is a test function`() = true

---

(source_file
  (function_declaration
   (identifier)
   (parameters)
   (function_body (boolean_literal))))

==================
Function with null literal as expression body
==================

fun f() = null

---

(source_file
  (function_declaration
   (identifier)
   (parameters)
   (function_body (null_literal))))
