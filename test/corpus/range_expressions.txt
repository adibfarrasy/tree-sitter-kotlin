================================================================================
range with variables
================================================================================
a..b
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (identifier)
    (identifier)))

================================================================================
range without spaces
================================================================================
0..10
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (decimal_integer_literal)
    (decimal_integer_literal)))

================================================================================
range with spaces between numbers
================================================================================
1 .. 10
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (decimal_integer_literal)
    (decimal_integer_literal)))

================================================================================
range with parentheses around numbers
================================================================================
(1)..(10)
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (parenthesized_expression
      (decimal_integer_literal))
    (parenthesized_expression
      (decimal_integer_literal))))

================================================================================
range until
================================================================================
0 until 10
--------------------------------------------------------------------------------
(source_file
  (infix_expression
    (decimal_integer_literal)
    (identifier)
    (decimal_integer_literal)))

================================================================================
range downTo
================================================================================
10 downTo 1
--------------------------------------------------------------------------------
(source_file
  (infix_expression
    (decimal_integer_literal)
    (identifier)
    (decimal_integer_literal)))

================================================================================
range with step
================================================================================
1..10 step 2
--------------------------------------------------------------------------------
(source_file
  (infix_expression
    (range_expression
      (decimal_integer_literal)
      (decimal_integer_literal))
    (identifier)
    (decimal_integer_literal)))

================================================================================
for loop with range no spaces
================================================================================
for (i in 0..10) {
    println(i)
}
--------------------------------------------------------------------------------
(source_file
  (for_statement
    (variable_declaration
      (identifier))
    (range_expression
      (decimal_integer_literal)
      (decimal_integer_literal))
    (control_structure_body
      (statements
        (call_expression
          (identifier)
          (call_suffix
            (value_arguments
              (value_argument
                (identifier)))))))))

================================================================================
range in for loop with parentheses
================================================================================
for (i in (1 .. 10)) {
    println(i)
}
--------------------------------------------------------------------------------
(source_file
  (for_statement
    (variable_declaration
      (identifier))
    (parenthesized_expression
      (range_expression
        (decimal_integer_literal)
        (decimal_integer_literal)))
    (control_structure_body
      (statements
        (call_expression
          (identifier)
          (call_suffix
            (value_arguments
              (value_argument
                (identifier)))))))))

================================================================================
range with negative numbers
================================================================================
-5 .. 5
--------------------------------------------------------------------------------
(source_file
  (prefix_expression
    (range_expression
      (decimal_integer_literal)
      (decimal_integer_literal))))

================================================================================
range with mixed types
================================================================================
start .. end
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (identifier)
    (identifier)))

================================================================================
nested ranges in expression
================================================================================
(0 .. 5) + (10 .. 15)
--------------------------------------------------------------------------------
(source_file
  (additive_expression
    (parenthesized_expression
      (range_expression
        (decimal_integer_literal)
        (decimal_integer_literal)))
    (parenthesized_expression
      (range_expression
        (decimal_integer_literal)
        (decimal_integer_literal)))))

================================================================================
char range
================================================================================
'a'..'z'
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (character_literal)
    (character_literal)))

================================================================================
string range
================================================================================
"aa".."zz"
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (string_literal
      (string_content))
    (string_literal
      (string_content))))

================================================================================
reversed range
================================================================================
(1..10).reversed()
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (navigation_expression
      (parenthesized_expression
        (range_expression
          (decimal_integer_literal)
          (decimal_integer_literal)))
      (navigation_suffix
        (identifier)))
    (call_suffix
      (value_arguments))))

================================================================================
range contains check
================================================================================
5 in 1..10
--------------------------------------------------------------------------------
(source_file
  (check_expression
    (decimal_integer_literal)
    (range_expression
      (decimal_integer_literal)
      (decimal_integer_literal))))


================================================================================
range as function parameter
================================================================================
processRange(1..100)
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (identifier)
    (call_suffix
      (value_arguments
        (value_argument
          (range_expression
            (decimal_integer_literal)
            (decimal_integer_literal)))))))

================================================================================
range with property access
================================================================================
obj.start..obj.end
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (navigation_expression
      (identifier)
      (navigation_suffix
        (identifier)))
    (navigation_expression
      (identifier)
      (navigation_suffix
        (identifier)))))

================================================================================
range with function calls
================================================================================
getMin()..getMax()
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (call_expression
      (identifier)
      (call_suffix
        (value_arguments)))
    (call_expression
      (identifier)
      (call_suffix
        (value_arguments)))))

================================================================================
range map operation
================================================================================
(1..5).map { it * 2 }
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (navigation_expression
      (parenthesized_expression
        (range_expression
          (decimal_integer_literal)
          (decimal_integer_literal)))
      (navigation_suffix
        (identifier)))
    (call_suffix
      (annotated_lambda
        (lambda_literal
          (statements
            (multiplicative_expression
              (identifier)
              (decimal_integer_literal))))))))

================================================================================
range filter operation
================================================================================
(1..10).filter { it % 2 == 0 }
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (navigation_expression
      (parenthesized_expression
        (range_expression
          (decimal_integer_literal)
          (decimal_integer_literal)))
      (navigation_suffix
        (identifier)))
    (call_suffix
      (annotated_lambda
        (lambda_literal
          (statements
            (equality_expression
              (multiplicative_expression
                (identifier)
                (decimal_integer_literal))
              (decimal_integer_literal))))))))

================================================================================
range forEach
================================================================================
(1..3).forEach { println(it) }
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (navigation_expression
      (parenthesized_expression
        (range_expression
          (decimal_integer_literal)
          (decimal_integer_literal)))
      (navigation_suffix
        (identifier)))
    (call_suffix
      (annotated_lambda
        (lambda_literal
          (statements
            (call_expression
              (identifier)
              (call_suffix
                (value_arguments
                  (value_argument
                    (identifier)))))))))))

================================================================================
range to list conversion
================================================================================
(1..5).toList()
--------------------------------------------------------------------------------
(source_file
  (call_expression
    (navigation_expression
      (parenthesized_expression
        (range_expression
          (decimal_integer_literal)
          (decimal_integer_literal)))
      (navigation_suffix
        (identifier)))
    (call_suffix
      (value_arguments))))

================================================================================
complex range expression
================================================================================
(start + 1)..(end - 1)
--------------------------------------------------------------------------------
(source_file
  (range_expression
    (parenthesized_expression
      (additive_expression
        (identifier)
        (decimal_integer_literal)))
    (parenthesized_expression
      (additive_expression
        (identifier)
        (decimal_integer_literal)))))
